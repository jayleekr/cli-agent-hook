#!/bin/bash

# CLI Agent Hook - Command Line Interface
# Bootstrap and manage AI-assisted development environments

set -euo pipefail

# Script directory and paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INSTALL_DIR="$(dirname "$SCRIPT_DIR")"
DOTFILES_DIR="$INSTALL_DIR"
LIB_DIR="$INSTALL_DIR/lib"

# Source configuration manager
source "$LIB_DIR/config-manager.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[CLI-AGENT-HOOK]${NC} $1"; }
log_success() { echo -e "${GREEN}[CLI-AGENT-HOOK]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[CLI-AGENT-HOOK]${NC} $1"; }
log_error() { echo -e "${RED}[CLI-AGENT-HOOK]${NC} $1"; }

# Show usage information
show_usage() {
    cat << EOF
CLI Agent Hook - Bootstrap AI-assisted development environments

Usage: cli-agent-hook <command> [options]

Commands:
    install [--component=...]    Install all or specific components
    update                       Update configurations and repository
    backup                       Backup current configurations
    restore [component]          Restore from backup
    validate [component]         Validate configuration files
    status                       Show installation status
    clean                        Remove all configurations
    help                         Show this help message

Components:
    fish, nvim, tmux, aerospace, sketchybar, karabiner, all (default)

Examples:
    cli-agent-hook install                    # Install everything
    cli-agent-hook install --component=fish  # Install only Fish shell
    cli-agent-hook backup                     # Backup all configs
    cli-agent-hook restore fish              # Restore Fish config
    cli-agent-hook validate tmux             # Validate Tmux config

For more information, visit: https://github.com/jayleekr/cli-agent-hook
EOF
}

# Check component installation status
check_component_status() {
    local component="$1"
    
    case "$component" in
        "fish")
            if [[ -L "$HOME/.config/fish" && -d "$HOME/.config/fish" ]]; then
                echo "✅ Fish configuration linked"
            else
                echo "❌ Fish configuration not linked"
            fi
            ;;
        "nvim")
            if [[ -L "$HOME/.config/nvim" && -d "$HOME/.config/nvim" ]]; then
                echo "✅ Neovim configuration linked"
            else
                echo "❌ Neovim configuration not linked"
            fi
            ;;
        "tmux")
            if [[ -L "$HOME/.tmux.conf" && -f "$HOME/.tmux.conf" ]]; then
                echo "✅ Tmux configuration linked"
            else
                echo "❌ Tmux configuration not linked"
            fi
            ;;
        "aerospace")
            if [[ -L "$HOME/.aerospace.toml" && -f "$HOME/.aerospace.toml" ]]; then
                echo "✅ Aerospace configuration linked"
            else
                echo "❌ Aerospace configuration not linked"
            fi
            ;;
        "sketchybar")
            if [[ -L "$HOME/.config/sketchybar" && -d "$HOME/.config/sketchybar" ]]; then
                echo "✅ SketchyBar configuration linked"
            else
                echo "❌ SketchyBar configuration not linked"
            fi
            ;;
        "karabiner")
            if [[ -L "$HOME/.config/karabiner" && -d "$HOME/.config/karabiner" ]]; then
                echo "✅ Karabiner configuration linked"
            else
                echo "❌ Karabiner configuration not linked"
            fi
            ;;
    esac
}

# Show installation status
show_status() {
    log_info "CLI Agent Hook Installation Status"
    echo
    
    echo "Repository: $INSTALL_DIR"
    if [[ -d "$INSTALL_DIR/.git" ]]; then
        echo "Git status: $(cd "$INSTALL_DIR" && git rev-parse --short HEAD) ($(cd "$INSTALL_DIR" && git branch --show-current))"
    fi
    echo
    
    echo "Component Status:"
    local components=("fish" "nvim" "tmux" "aerospace" "sketchybar" "karabiner")
    for component in "${components[@]}"; do
        echo "  $(check_component_status "$component")"
    done
    echo
    
    echo "System Information:"
    echo "  OS: $(uname -s) $(uname -r)"
    echo "  Architecture: $(uname -m)"
    echo "  Shell: $SHELL"
    echo "  User: $USER"
}

# Install specific component
install_component() {
    local component="$1"
    
    case "$component" in
        "fish")
            log_info "Installing Fish shell configuration..."
            if [[ -d "$DOTFILES_DIR/config/fish" ]]; then
                backup_config "$HOME/.config/fish" "fish"
                ln -sf "$DOTFILES_DIR/config/fish" "$HOME/.config/fish"
                log_success "Fish configuration installed"
            else
                log_error "Fish configuration not found in dotfiles"
                return 1
            fi
            ;;
        "nvim")
            log_info "Installing Neovim configuration..."
            if [[ -d "$DOTFILES_DIR/config/nvim" ]]; then
                backup_config "$HOME/.config/nvim" "nvim"
                ln -sf "$DOTFILES_DIR/config/nvim" "$HOME/.config/nvim"
                log_success "Neovim configuration installed"
            else
                log_error "Neovim configuration not found in dotfiles"
                return 1
            fi
            ;;
        "tmux")
            log_info "Installing Tmux configuration..."
            if [[ -f "$DOTFILES_DIR/tmux.conf" ]]; then
                backup_config "$HOME/.tmux.conf" "tmux"
                ln -sf "$DOTFILES_DIR/tmux.conf" "$HOME/.tmux.conf"
                log_success "Tmux configuration installed"
            else
                log_error "Tmux configuration not found in dotfiles"
                return 1
            fi
            ;;
        "aerospace")
            if [[ "$OSTYPE" == "darwin"* ]]; then
                log_info "Installing Aerospace configuration..."
                if [[ -f "$DOTFILES_DIR/aerospace.toml" ]]; then
                    backup_config "$HOME/.aerospace.toml" "aerospace"
                    ln -sf "$DOTFILES_DIR/aerospace.toml" "$HOME/.aerospace.toml"
                    log_success "Aerospace configuration installed"
                else
                    log_error "Aerospace configuration not found in dotfiles"
                    return 1
                fi
            else
                log_warning "Aerospace is macOS only, skipping..."
            fi
            ;;
        "sketchybar")
            if [[ "$OSTYPE" == "darwin"* ]]; then
                log_info "Installing SketchyBar configuration..."
                if [[ -d "$DOTFILES_DIR/config/sketchybar" ]]; then
                    backup_config "$HOME/.config/sketchybar" "sketchybar"
                    ln -sf "$DOTFILES_DIR/config/sketchybar" "$HOME/.config/sketchybar"
                    log_success "SketchyBar configuration installed"
                else
                    log_error "SketchyBar configuration not found in dotfiles"
                    return 1
                fi
            else
                log_warning "SketchyBar is macOS only, skipping..."
            fi
            ;;
        "karabiner")
            if [[ "$OSTYPE" == "darwin"* ]]; then
                log_info "Installing Karabiner configuration..."
                if [[ -d "$DOTFILES_DIR/config/karabiner" ]]; then
                    backup_config "$HOME/.config/karabiner" "karabiner"
                    ln -sf "$DOTFILES_DIR/config/karabiner" "$HOME/.config/karabiner"
                    log_success "Karabiner configuration installed"
                else
                    log_error "Karabiner configuration not found in dotfiles"
                    return 1
                fi
            else
                log_warning "Karabiner is macOS only, skipping..."
            fi
            ;;
        *)
            log_error "Unknown component: $component"
            return 1
            ;;
    esac
}

# Main command handler
main() {
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 1
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        "install")
            local components=("fish" "nvim" "tmux" "aerospace" "sketchybar" "karabiner")
            
            # Parse component option
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    --component=*)
                        local component="${1#*=}"
                        if [[ "$component" == "all" ]]; then
                            components=("fish" "nvim" "tmux" "aerospace" "sketchybar" "karabiner")
                        else
                            components=("$component")
                        fi
                        ;;
                    *)
                        log_error "Unknown option: $1"
                        exit 1
                        ;;
                esac
                shift
            done
            
            # Install components
            for component in "${components[@]}"; do
                install_component "$component"
            done
            ;;
        "update")
            log_info "Updating CLI Agent Hook..."
            cd "$INSTALL_DIR"
            git pull origin main
            log_success "Repository updated"
            ;;
        "backup")
            log_info "Creating backup of all configurations..."
            local timestamp
            timestamp=$(date +%Y%m%d_%H%M%S)
            local backup_dir="$HOME/.cli-agent-hook-backup-$timestamp"
            mkdir -p "$backup_dir"
            
            # Backup configurations
            [[ -e "$HOME/.config/fish" ]] && cp -r "$HOME/.config/fish" "$backup_dir/"
            [[ -e "$HOME/.config/nvim" ]] && cp -r "$HOME/.config/nvim" "$backup_dir/"
            [[ -e "$HOME/.tmux.conf" ]] && cp "$HOME/.tmux.conf" "$backup_dir/"
            [[ -e "$HOME/.aerospace.toml" ]] && cp "$HOME/.aerospace.toml" "$backup_dir/"
            [[ -e "$HOME/.config/sketchybar" ]] && cp -r "$HOME/.config/sketchybar" "$backup_dir/"
            [[ -e "$HOME/.config/karabiner" ]] && cp -r "$HOME/.config/karabiner" "$backup_dir/"
            
            log_success "Backup created: $backup_dir"
            ;;
        "restore")
            local component="${1:-}"
            if [[ -z "$component" ]]; then
                log_error "Component required for restore"
                exit 1
            fi
            
            case "$component" in
                "fish")
                    restore_config "$HOME/.config/fish" "fish"
                    ;;
                "nvim")
                    restore_config "$HOME/.config/nvim" "nvim"
                    ;;
                "tmux")
                    restore_config "$HOME/.tmux.conf" "tmux"
                    ;;
                *)
                    log_error "Unknown component: $component"
                    exit 1
                    ;;
            esac
            ;;
        "validate")
            local component="${1:-}"
            if [[ -z "$component" ]]; then
                log_error "Component required for validation"
                exit 1
            fi
            
            case "$component" in
                "fish")
                    validate_config "$HOME/.config/fish/config.fish" "fish"
                    ;;
                "tmux")
                    validate_config "$HOME/.tmux.conf" "tmux"
                    ;;
                "nvim")
                    validate_config "$HOME/.config/nvim/init.lua" "nvim"
                    ;;
                *)
                    log_error "Unknown component: $component"
                    exit 1
                    ;;
            esac
            ;;
        "status")
            show_status
            ;;
        "clean")
            log_warning "This will remove all CLI Agent Hook configurations"
            read -p "Are you sure? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                rm -f "$HOME/.config/fish" "$HOME/.config/nvim" "$HOME/.tmux.conf"
                rm -f "$HOME/.aerospace.toml" "$HOME/.config/sketchybar" "$HOME/.config/karabiner"
                log_success "Configurations removed"
            fi
            ;;
        "help"|"--help"|"-h")
            show_usage
            ;;
        *)
            log_error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"